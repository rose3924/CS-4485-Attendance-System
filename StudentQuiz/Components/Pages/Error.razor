<!--
    
    This is the Blazor error page component that displays a user-friendly message when an unhandled exception occurs.
    It optionally shows the request ID to help with debugging and provides guidance about enabling development mode
    for more detailed error information. The request ID is retrieved from either the current Activity or the HTTP context.
    Olivia Anderson
-->

@page "/Error"
@using System.Diagnostics

<PageTitle>Error</PageTitle>

<!-- Main error messages -->
<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

<!-- Conditionally display the request ID if it's available -->
@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

@code{
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; } // Access to the current HTTP context (injected via cascading parameter)

    private string? RequestId { get; set; } // Stores the request ID for tracking/debugging
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId); // Only show if there's a valid request ID

    protected override void OnInitialized() =>
        // Attempt to retrieve the request ID from current activity or HTTP context
        RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
}
