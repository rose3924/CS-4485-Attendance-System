<!-- Olivia Anderson -->

@page "/login"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore
@using StudentQuiz.Models
@using StudentQuiz.Components.Service
@inject IHttpContextAccessor HttpContextAccessor
@inject Components.Service.UserState UserState
@inject NavigationManager NavigationManager
@inject FelixDbContext DbContext
@inject QuizResult QuizResult
@inject QuizRegistration QuizService

<h3>Login</h3>
<EditForm Model="StudentModel" OnValidSubmit="HandleRegistration" FormName="UserRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrWhiteSpace(StudentModel.ValidationErrorMessage))
    {
        <div class="alert alert-danger">@StudentModel.ValidationErrorMessage</div>
    }
    <div>
        <label for="username">StudentID:</label>
        <InputText id="username" class="form-control" style="max-width: 200px;" @bind-Value="StudentModel.Identifier" />
        <ValidationMessage For="@(() => StudentModel.Identifier)" />
    </div>
    <div>
        <label for="quizcode">Attendance Code:</label>
        <InputText id="quizcode" class="form-control" style="max-width: 200px;" @bind-Value="StudentModel.QuizCode" />
        <ValidationMessage For="@(() => StudentModel.QuizCode)" />
    </div>

    <div style="margin-top: 15px;">
        <button type="submit">Register</button>
    </div>
    <p>@message</p>
</EditForm>


@code {
    [SupplyParameterFromForm]
    protected UserData StudentModel { get; set; } = new();
    private Quiz? Quiz { get; set; }
    private String message = string.Empty;

    private async Task HandleRegistration()
    {
        Console.WriteLine("Form submitted successfully.");

        // This is where you'd handle DB insertion or API call
        Console.WriteLine($"User: {StudentModel.Identifier}");

        if (string.IsNullOrWhiteSpace(StudentModel.Identifier) || string.IsNullOrWhiteSpace(StudentModel.QuizCode))
        {
            Console.WriteLine("Validation failed!");
            return;
        }
        if (DbContext == null)
        {
            throw new InvalidOperationException("DbContext is not initialized.");
        }

        var username = await GetUserByStudentId();

        // make sure that user object isn't null
        if (username != null)
        {
            Console.WriteLine("Quiz found!");
            StudentModel.Username = username.LoginId;
            UserState.Username = StudentModel.Username;
            // THIS IS A VALIDATION ERROR
        }
        else
        {
            // Set validation error manually
            StudentModel.ValidationErrorMessage = "Identifier not found. Please enter a valid UTD Identifier.";
            return;
        }

        // Set UserState properties
        UserState.Identifier = StudentModel.Identifier;
        Console.WriteLine($"UserState: StudentID = {UserState.Identifier}");

        // Store user details in session
        HttpContextAccessor.HttpContext.Session.SetString("Identifier", UserState.Identifier);
        if (UserState.Username != null)
        {
            HttpContextAccessor.HttpContext.Session.SetString("Username", UserState.Username);
        }

        // Before continuing, ensure the quiz has at least one question.
        Quiz = await QuizService.GetQuizzes(DbContext, StudentModel.QuizCode);
        if (Quiz == null)
        {
            message = "Invlaid Quiz Code";
            return;
        }

        QuizRegistration.QuizTime qTime = new QuizRegistration.QuizTime(Quiz, StudentModel.QuizCode);
        if (qTime.ErrorMessage.Equals("") == false)
        {
            message = qTime.ErrorMessage;
            return;

        }
        
        
            if (Quiz != null && Quiz.Questions.Count > 0)
            {
                // Navigate to quizdisplay page
                await InvokeAsync(() => NavigationManager.NavigateTo("/quizdisplay/" + StudentModel.QuizCode));
            }
            else
            {
                int correctAnswers = 0;

                string IpAddress = QuizService.GetIpAddress();
                Console.WriteLine($"Login.razor GetIpAddress() = {IpAddress}");

                string uname = "";
                if (StudentModel.Username != null)
                {
                    uname = StudentModel.Username;
                }

                var qrecord = await QuizService.GetQRecordByQuizIdIpAddress(DbContext, Quiz.Id, IpAddress);
                var qrecordForStudentId = await QuizService.GetQRecordByQuizIdStudentID(DbContext, Quiz.Id, UserState.Identifier);

                if (qrecord == null && qrecordForStudentId == null)
                {
                    decimal percentage = 100;
                    var currentuser = await QuizService.GetUserByLoginId(DbContext, uname);
                    if (currentuser == null)
                    {
                        Console.WriteLine("User not found!");
                        message = "Invalid user name";
                        return;
                    }

                    // Add the record
                    await QuizService.AddQuizRecordAsync(DbContext, Quiz.Id, currentuser.Id, IpAddress, correctAnswers, percentage, qTime.AttendanceStatus);
                }
                else
                {

                        if (qrecord != null)
                        {
                            message = $"The client ip address: {IpAddress} has already been used to register.";

                        }
                        else if (qrecordForStudentId != null)
                        {
                            message = $"The specified student id: {UserState.Identifier} has already been used to register.";
                        }
                        else
                        {
                            message = $"Either the ip address: {IpAddress} or the specified student id: {UserState.Identifier} has been used for this quiz.";
                        }
                        return;
                    
                }
                QuizResult.CorrectAnswers = 0;
                QuizResult.QuizCount = 0;
                QuizResult.IncorrectAnswers = 0;
                string navUrl = $"/quizcomplete";
                await InvokeAsync(() => NavigationManager.NavigateTo(navUrl));
            //TODO see if person is in class
        }

        // Navigate to home page
        await InvokeAsync(() => NavigationManager.NavigateTo("/quizdisplay/"+StudentModel.QuizCode));
    }

    public async Task<User?> GetUserByStudentId()
    {
        return await DbContext.Users.FirstOrDefaultAsync(q => q.StudentId == StudentModel.Identifier);
    }

    // Collects data from the form
    public class UserData
    {
        public string? Username { get; set; }

        [Required(ErrorMessage = "Identifier is required.")]
        public string? Identifier { get; set; }

        public string? IpAddress { get; set; }

        [Required(ErrorMessage = "Quiz code is required.")]
        public string? QuizCode { get; set; }

        public string? ValidationErrorMessage { get; set; }
    }
}
