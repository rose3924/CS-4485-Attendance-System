<!-- Olivia Anderson -->
@page "/quizdisplay/{code}"
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@using StudentQuiz.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using System.Text
@using System.ComponentModel.DataAnnotations;
@using StudentQuiz.Components.Service
@inject FelixDbContext DbContext
@inject NavigationManager NavigationManager
@inject QuizRegistration QuizService
@inject QuizResult QuizResult

<PageTitle>Quiz</PageTitle>

<h3>Quiz</h3>
<p>Parameter received: @Code</p>
@if (Quiz == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@Quiz.Title</h4>
    <EditForm Model="this" method="post" OnValidSubmit="SubmitAnswers" FormName="UserAnswers" Enhance>
        <DataAnnotationsValidator />
        @* Initialize a question number *@
        @for (int i = 0; i < Quiz.Questions.Count; i++)
        {
            var question = Quiz.Questions.ToList()[i];

            <div class="question">
                <p><strong>@($"{i + 1}. {question.QuestionText}")</strong></p>
                <ul style="list-style-type: none; padding: 0;">
                    @for (int j = 0; j < question.Answers.Count; j++)
                    {
                        var answer = question.Answers.ToList()[j];
                        var answerLetter = (char)('A' + j);
                        <li>
                            <label>
                                <input type="radio"
                                name="question-@i"
                                value="@answer.Id"
                                checked="@((UserAnswers.ContainsKey(question.Id) && UserAnswers[question.Id] == answer.Id))"
                                @onchange="@(e => OnAnswerSelected(question.Id, answer.Id))" />
                                @($"{answerLetter}. {answer.AnswerText}")
                            </label>
                        </li>
                    }
                </ul>
            </div>
        }
        <button type="submit">Submit</button>
        <p>@ResultMessage</p>
    </EditForm>
}


@code {
    [Parameter]
    public string? Code { get; set; } // Parameter from the route


    private Dictionary<int, int> UserAnswers = new();

    private Quiz? Quiz { get; set; }
    private string? Username;
    private string? Identifier;
    private string? IpAddress;
    private string ResultMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Retrieve session values
        Username = HttpContextAccessor.HttpContext?.Session.GetString("Username");

        Console.WriteLine($"Quiz Display (OnInitializedAsync) retrieved from session: Username = {Username}");
        IpAddress = QuizService.GetIpAddress();

        if (Code != null)
        {
            Quiz = await QuizService.GetQuizzes(DbContext, Code);
        }



    }

    private void OnAnswerSelected(int questionId, int answerId)
    {
        Console.WriteLine("OnAnswerSelected(" + questionId + ", " + answerId + ")");

        // Store the selected answer ID for the given question ID
        UserAnswers[questionId] = answerId;
    }

    private async Task SubmitAnswers()
    {
        Console.WriteLine("SubmitAnswers()");

        if (Quiz == null)
        {
            Console.WriteLine("Quiz is null for SubmitAnswers!");
            return;
        }
        if (SelectedAnswers() == false)
        {
            Console.WriteLine("User did not enter all values for all questions.");

            return;
        }
        int correctAnswers = 0;
        int incorrectAnswers = Quiz.Questions.Count();

        foreach (var entry in UserAnswers)
        {
            int questionId = entry.Key;
            int selectedAnswerId = entry.Value;
            Console.WriteLine($"Processing: QuestionID = {questionId}, SelectedAnswerID = {selectedAnswerId}");

            var question = Quiz.Questions.FirstOrDefault(q => q.Id == questionId);
            if (question != null)
            {
                var correctAnswer = question.Answers.FirstOrDefault(a => a.CorrectValue.Equals("T"));
                if (correctAnswer != null && correctAnswer.Id == selectedAnswerId)
                {
                    correctAnswers++;
                    incorrectAnswers--;
                }
            }
        }

        if (Username == null || IpAddress == null || Quiz == null)
        {
            Console.WriteLine("Unable to process Quiz information! User name or ip address are not available.");
            return;
        }
        else
        {
            int questioncount = Quiz.Questions.Count;

            var qrecord = await QuizService.GetQRecordByQuizIdIpAddress(DbContext, Quiz.Id, IpAddress);
            // If the qrecord is NULL, the quiz information should be save to the quiz_record table.
            if (qrecord == null)
            {
                decimal percentage = (decimal)correctAnswers / questioncount * 100;

                var currentuser = await QuizService.GetUserByLoginId(DbContext, Username);
                if (currentuser == null)
                {
                    Console.WriteLine("User not found!");
                    return;
                }

                //TODO: Add time stuff

                // Add the record
                await QuizService.AddQuizRecordAsync(DbContext, Quiz.Id, currentuser.Id, IpAddress, correctAnswers, percentage, "PRESENT");
            }
            else
            {
                int uid = qrecord.UserId.HasValue ? qrecord.UserId.Value : 0;
                var quser = await GetUserById(uid);
                StringBuilder str = new StringBuilder();
                str.Append("A Quiz record already exists for ");
                if (quser != null)
                {
                    str.Append(quser.LoginId);
                }
                else {
                    str.Append("Unknown");
                }
                str.Append(" from ip address ");
                str.Append(qrecord.IpAddress);
                str.Append(". A second quiz cannot be registered for this ip address.");
                ResultMessage = str.ToString();
                return;
            }

        }

        

        QuizResult.CorrectAnswers = correctAnswers;
        QuizResult.QuizCount = Quiz.Questions.Count;
        QuizResult.IncorrectAnswers = incorrectAnswers;
        // Navigate to quizdisplay page
        string navUrl = $"/quizcomplete";
        await InvokeAsync(() => NavigationManager.NavigateTo(navUrl)); 
    }

    private bool SelectedAnswers()
    {
        if (UserAnswers.Count() == 0)
        {
            return false;
        }
        if (((Quiz != null) && UserAnswers.Count() < Quiz.Questions.Count()))
        {
            return false;
        }
        return true;
    }

    public async Task<User?> GetUserById(int uId)
    {
        return await DbContext.Users.FirstOrDefaultAsync(q => q.Id == uId);
    }
}

